name: Update Documentation
on:
  pull_request:
    paths:
      - 'roles/*/defaults/main.yaml'
      - 'roles/*/Chart.yaml'
      - 'roles/*/README.md.gotmpl'
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}
defaults:
  run:
    shell: bash
jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install package
        env:
          HELM_DOCS_URL: https://github.com/norwoodj/helm-docs/releases/download
          HELM_DOCS_VERSION: 1.14.2
        run: |
          sudo wget -qP /tmp $HELM_DOCS_URL/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.deb
          sudo apt-get -y install /tmp/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.deb
      - name: Generate documentation
        id: files
        run: |
          git config user.email '${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com'
          git config user.name '${{ github.actor }}'
          git fetch
          git switch ${{ github.head_ref }}
          helm-docs --values-file=./defaults/main.yaml
          if [ -n "$(git ls-files -om --deduplicate)" ]; then
            branch='${{ github.head_ref }}'
            oid='${{ github.event.pull_request.head.sha }}'
            declare -a changes
            mapfile -t clips < <(git ls-files -d --deduplicate)
            mapfile -t files < <(git ls-files -om --deduplicate)
            for file in "${files[@]}"; do
              type='addition'
              for clip in "${clips[@]}"; do
                if [ "$clip" == "$file" ]; then
                  type='deletion'
                fi
              done
              changes[][file][type]="$type"
              changes[][file][path]="$file"
              if [ "$type" == 'addition' ]; then
                changes[][file][contents]="$(base64 -w 0 $file)"
              fi
            done
          fi
      - name: Update documentation
        uses: octokit/graphql-action@v2.3.2
        with:
          query: |
            mutation(
              $repository: String!,
              $branchName: String!,
              $oid: GitObjectID!,
              $message: String!,
              $fileChanges: [FileChangesInput!]!
            ) {
              createCommitOnBranch(input: {
                branch: {
                  repositoryNameWithOwner: $repository,
                  branchName: $branchName,
                },
                expectedHeadOid: $oid,
                message: {
                  headline: $message
                },
                fileChanges: $fileChanges
              }) {
                commit {
                  oid
                }
              }
            }
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          branchName: ${{ steps.files.outputs.branch }}
          oid: ${{ steps.files.outputs.oid }}
          message: 'docs(github-action): update documentation'
          fileChanges: ${{ steps.files.outputs.changes }}
permissions:
  contents: write
