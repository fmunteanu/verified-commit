name: Update Documentation

on:
  pull_request:
    paths:
      - 'roles/*/defaults/main.yaml'
      - 'roles/*/Chart.yaml'
      - 'roles/*/README.md.gotmpl'

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install package
        env:
          HELM_DOCS_URL: https://github.com/norwoodj/helm-docs/releases/download
          HELM_DOCS_VERSION: 1.14.2
        run: |
          sudo wget -qP /tmp $HELM_DOCS_URL/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.deb
          sudo apt-get -y install /tmp/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.deb
          npm install @octokit/graphql

      - name: Update documentation
        run: |
          git config user.email '${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com'
          git config user.name '${{ github.actor }}'
          git fetch
          git switch ${{ github.head_ref }}
          helm-docs --values-file=./defaults/main.yaml

      - name: Get repository id
        uses: actions/github-script@v7
        with:
          script: |
            const fetchRepositoryId = async () => {
              import { graphql } from "@octokit/graphql";
              const graphqlWithAuth = graphql.defaults({
                headers: {
                  authorization: `Bearer ${{ github.token }}`
                }
              });
              const query = `
                query($owner: String!, $name: String!) {
                  repository(owner: $owner, name: $name) {
                    id
                  }
                }
              `;
              const variables = {
                owner: context.repo.owner,
                name: context.repo.repo
              };
              try {
                const response = await graphqlWithAuth(query, variables);
                return response.repository.id;
              } catch (error) {
                throw new Error(`Failed to fetch repository ID: ${error.message}`);
              }
            };
            (async () => {
              try {
                const repositoryId = await fetchRepositoryId();
                console.log(`Repository ID: ${repositoryId}`);
                core.setOutput("repository_id", repositoryId);
              } catch (error) {
                core.setFailed(error.message);
              }
            })();
